'use strict';
(() => {
  const e = (e, t = document) => t.querySelector(e),
    t = (e, t = document) => Array.from(t.querySelectorAll(e)),
    n = (e) => document.getElementById(e);
  t('#year').forEach((e) => (e.textContent = new Date().getFullYear()));
  const o = 'theme',
    r = n('theme-toggle'),
    a = (e) => {
      e
        ? 'light' === e
          ? (document.documentElement.setAttribute('data-theme', 'light'),
            null == r || r.setAttribute('aria-pressed', 'false'))
          : 'dark' === e
            ? (document.documentElement.setAttribute('data-theme', 'dark'),
              null == r || r.setAttribute('aria-pressed', 'true'))
            : (document.documentElement.removeAttribute('data-theme'),
              null == r || r.setAttribute('aria-pressed', 'false'))
        : (document.documentElement.removeAttribute('data-theme'),
          null == r || r.setAttribute('aria-pressed', 'false'));
    };
  (a(localStorage.getItem(o) || null),
    null == r ||
      r.addEventListener('click', () => {
        const e =
          'dark' === document.documentElement.getAttribute('data-theme')
            ? 'light'
            : 'dark';
        (localStorage.setItem(o, e), a(e));
      }));
  const s = 'todos:minimal';
  let i = JSON.parse(localStorage.getItem(s) || '[]');
  const l = () => Math.random().toString(36).slice(2, 10),
    c = () => localStorage.setItem(s, JSON.stringify(i)),
    d = n('status'),
    u = (e) => {
      d && (d.textContent = e);
    },
    m = n('todo-form'),
    p = n('form-errors'),
    f = n('todo-list'),
    h = n('stats'),
    v = n('filter-status'),
    b = n('clear-completed'),
    g = (e) => {
      (i.unshift({
        id: l(),
        title: e.title.trim(),
        priority: e.priority || 'normal',
        due: e.due || '',
        completed: !1,
        createdAt: Date.now(),
      }),
        c(),
        u(`Added: ${e.title.trim()}`),
        y(),
        m.reset());
    },
    y = () => {
      if (!f) return;
      ((f.textContent = ''),
        S()
          .map(E)
          .forEach((e) => f.appendChild(e)),
        L());
    },
    S = () => {
      const e = (v && v.value) || 'all';
      return i.filter((t) =>
        'active' === e ? !t.completed : 'completed' === e ? t.completed : !0,
      );
    },
    L = () => {
      const e = i.length,
        t = i.filter((e) => e.completed).length;
      h && (h.textContent = `${e} task${1 !== e ? 's' : ''}, ${t} completed`);
    },
    E = (e) => {
      const t = document.createElement('li');
      ((t.className = 'todo-item'),
        t.setAttribute('role', 'listitem'),
        (t.dataset.id = e.id));
      const n = document.createElement('input');
      ((n.type = 'checkbox'),
        (n.className = 'input'),
        (n.checked = e.completed),
        (n.id = `cb-${e.id}`),
        n.setAttribute(
          'aria-label',
          `Mark "${e.title}" as ${e.completed ? 'active' : 'completed'}`,
        ),
        n.addEventListener('change', () => {
          ((i = i.map((t) =>
            t.id === e.id ? { ...t, completed: !t.completed } : t,
          )),
            c());
          const t = i.find((t) => t.id === e.id);
          (u(
            `${(null == t ? void 0 : t.completed) ? 'Completed' : 'Active'}: ${(null == t ? void 0 : t.title) || 'Task'}`,
          ),
            y());
        }));
      const o = document.createElement('div');
      o.innerHTML = `<div class="todo-title">${e.title}</div><div class="todo-meta">${e.priority} ‚Ä¢ ${e.due || 'No due date'}</div>`;
      const r = document.createElement('div');
      r.className = 'todo-actions';
      const a = document.createElement('button');
      return (
        (a.type = 'button'),
        (a.className = 'btn'),
        a.setAttribute('aria-label', `Delete "${e.title}"`),
        (a.innerHTML =
          '<span aria-hidden="true">üóëÔ∏è</span><span class="sr-only">Delete</span>'),
        a.addEventListener('click', () => {
          const t = i.find((t) => t.id === e.id);
          ((i = i.filter((t) => t.id !== e.id)),
            c(),
            u(`Deleted: ${(null == t ? void 0 : t.title) || 'Task'}`),
            y());
        }),
        r.append(a),
        t.append(n, o, r),
        t
      );
    },
    T = (e) => {
      const t = [];
      return (
        (!e.title || e.title.trim().length < 2) &&
          t.push('Task must be at least 2 characters.'),
        t
      );
    };
  (m &&
    m.addEventListener('submit', (e) => {
      (e.preventDefault(), (p.textContent = ''));
      const t = {
          title: n('task-title').value,
          priority: n('task-priority').value,
          due: n('task-due').value,
        },
        o = T(t);
      if (o.length) {
        const e = document.createElement('ul');
        return (
          o.forEach((t) => {
            const n = document.createElement('li');
            ((n.textContent = t), e.appendChild(n));
          }),
          p.appendChild(e),
          void 0
        );
      }
      g(t);
    }),
    v && v.addEventListener('input', y),
    b &&
      b.addEventListener('click', () => {
        const e = i.filter((e) => e.completed).length;
        e &&
          ((i = i.filter((e) => !e.completed)),
          c(),
          u(`Cleared ${e} completed`),
          y());
      }),
    y());
})();
